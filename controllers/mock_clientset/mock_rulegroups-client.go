// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coralogix/coralogix-operator/controllers/clientset (interfaces: RuleGroupsClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=../mock_clientset/mock_rulegroups-client.go -package=mock_clientset github.com/coralogix/coralogix-operator/controllers/clientset RuleGroupsClientInterface
//

// Package mock_clientset is a generated GoMock package.
package mock_clientset

import (
	context "context"
	reflect "reflect"

	__ "github.com/coralogix/coralogix-operator/controllers/clientset/grpc/rules-groups/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRuleGroupsClientInterface is a mock of RuleGroupsClientInterface interface.
type MockRuleGroupsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRuleGroupsClientInterfaceMockRecorder
}

// MockRuleGroupsClientInterfaceMockRecorder is the mock recorder for MockRuleGroupsClientInterface.
type MockRuleGroupsClientInterfaceMockRecorder struct {
	mock *MockRuleGroupsClientInterface
}

// NewMockRuleGroupsClientInterface creates a new mock instance.
func NewMockRuleGroupsClientInterface(ctrl *gomock.Controller) *MockRuleGroupsClientInterface {
	mock := &MockRuleGroupsClientInterface{ctrl: ctrl}
	mock.recorder = &MockRuleGroupsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleGroupsClientInterface) EXPECT() *MockRuleGroupsClientInterfaceMockRecorder {
	return m.recorder
}

// CreateRuleGroup mocks base method.
func (m *MockRuleGroupsClientInterface) CreateRuleGroup(arg0 context.Context, arg1 *__.CreateRuleGroupRequest) (*__.CreateRuleGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroup", arg0, arg1)
	ret0, _ := ret[0].(*__.CreateRuleGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroup indicates an expected call of CreateRuleGroup.
func (mr *MockRuleGroupsClientInterfaceMockRecorder) CreateRuleGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroup", reflect.TypeOf((*MockRuleGroupsClientInterface)(nil).CreateRuleGroup), arg0, arg1)
}

// DeleteRuleGroup mocks base method.
func (m *MockRuleGroupsClientInterface) DeleteRuleGroup(arg0 context.Context, arg1 *__.DeleteRuleGroupRequest) (*__.DeleteRuleGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroup", arg0, arg1)
	ret0, _ := ret[0].(*__.DeleteRuleGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroup indicates an expected call of DeleteRuleGroup.
func (mr *MockRuleGroupsClientInterfaceMockRecorder) DeleteRuleGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroup", reflect.TypeOf((*MockRuleGroupsClientInterface)(nil).DeleteRuleGroup), arg0, arg1)
}

// GetRuleGroup mocks base method.
func (m *MockRuleGroupsClientInterface) GetRuleGroup(arg0 context.Context, arg1 *__.GetRuleGroupRequest) (*__.GetRuleGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroup", arg0, arg1)
	ret0, _ := ret[0].(*__.GetRuleGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroup indicates an expected call of GetRuleGroup.
func (mr *MockRuleGroupsClientInterfaceMockRecorder) GetRuleGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroup", reflect.TypeOf((*MockRuleGroupsClientInterface)(nil).GetRuleGroup), arg0, arg1)
}

// UpdateRuleGroup mocks base method.
func (m *MockRuleGroupsClientInterface) UpdateRuleGroup(arg0 context.Context, arg1 *__.UpdateRuleGroupRequest) (*__.UpdateRuleGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroup", arg0, arg1)
	ret0, _ := ret[0].(*__.UpdateRuleGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroup indicates an expected call of UpdateRuleGroup.
func (mr *MockRuleGroupsClientInterfaceMockRecorder) UpdateRuleGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroup", reflect.TypeOf((*MockRuleGroupsClientInterface)(nil).UpdateRuleGroup), arg0, arg1)
}
